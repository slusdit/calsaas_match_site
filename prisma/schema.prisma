// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model School {
  sc      String       @id @unique
  name    String
  teachers Teacher[]
  sections Section[]
}

// enum UserRole {
//   ADMIN
//   USER
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   role          UserRole @default(USER) // New column
//   // accounts      Account[]
//   // sessions      Session[]
// }

model Teacher {
  key_id        Int                 @id @unique @default(autoincrement())
  empId         String?             @unique
  credPersonId  String?             @unique
  caltidesNumId String              @unique
  firstName     String
  middleName    String?
  lastName      String
  dateBirth     String?
  statusCode    String?             @default("A")
  seid          String              @unique                 
  sc            String?
  school        School?             @relation(fields: [sc], references: [sc])
  credentials   TeacherCredential[]
  sections      Section[]
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
}


model TeacherCredential {
  key_id           Int      @id @unique @default(autoincrement())
  credPersonId     String
  seid             String?
  teacher          Teacher? @relation(fields: [credPersonId], references: [credPersonId])
  caltidesNumId    String?
  docTitle         String
  authCode         String
  subjectCodeMajor String?
  subjectCodeMinor String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model Course {
  key_id             Int             @id @unique @default(autoincrement())
  stateCourseIdSec   String ?        @unique
  stateCourseIdAuth  String?        @unique
  authTableId     StateCourseAuth[]   
  sectionTableId  Section[]         
  // @@unique([stateCourseId, courseNumber])
}

model Section {
  key_id            Int               @id @unique @default(autoincrement())
  stateCode         String?
  sc                String
  sectionId         String
  empId             String
  empId2            String?
  seid              String?
  sectionNumber     String
  grade             String
  courseName        String
  courseNumber      String
  period            String
  school            School?            @relation(fields: [sc], references: [sc])
  course            Course?           @relation(fields: [stateCode], references: [stateCourseIdSec])
  teacher           Teacher?          @relation(fields: [seid], references: [seid])
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model StateCourseAuth {
  key_id            Int      @id @unique @default(autoincrement())
  stateCourseNumber String   
  localCourse       Course?  @relation(fields: [stateCourseNumber], references: [stateCourseIdAuth])
  authType          String
  docTitle          String
  authTitle         String
  authCode          String
  subjectCode       String
  subject           String
  notes             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  role          AssignedRoles[]    
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier      String
  token           String   @unique
  expires         DateTime

  @@unique([identifier, token])
}

model AssignedRoles {
  id                String    @id @default(cuid())
  userId            String
  user              User @relation(fields: [userId], references: [id])
  role              ROLE
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt          
}

enum ROLE {
  USER
  ADMIN
  SUPERADMIN
}